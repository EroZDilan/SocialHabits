import React, { useState, useEffect } from 'react';
import { StatusBar } from 'expo-status-bar';
import * as SplashScreen from 'expo-splash-screen';
import { NavigationContainer } from '@react-navigation/native'; // üî• IMPORTACI√ìN CLAVE
import { AuthProvider, useAuth } from './src/contexts/AuthContext';
import AuthScreen from './src/screens/AuthScreen';
import AppNavigator from './src/navigation/AppNavigator';
import CustomSplashScreen from './src/screens/SplashScreen';

// Prevenir que la splash screen nativa se oculte autom√°ticamente
SplashScreen.preventAutoHideAsync();

// üéØ COMPONENTE INTERNO PARA MANEJAR LA L√ìGICA DE AUTENTICACI√ìN
// Separamos esta l√≥gica porque necesita acceso al contexto de autenticaci√≥n
function AppContent() {
  const { user, loading } = useAuth();

  // üîß L√ìGICA DE RENDERIZADO CONDICIONAL
  // Si estamos cargando la sesi√≥n, no renderizamos nada (el splash se encarga)
  if (loading) {
    return null;
  }

  // üö™ DECISI√ìN DE NAVEGACI√ìN BASADA EN AUTENTICACI√ìN
  // Si no hay usuario autenticado, mostramos la pantalla de login
  // Si hay usuario, mostramos la navegaci√≥n principal de la app
  return user ? <AppNavigator /> : <AuthScreen />;
}

// üèóÔ∏è COMPONENTE PRINCIPAL DE LA APLICACI√ìN
export default function App() {
  const [isAppReady, setIsAppReady] = useState(false);
  const [showCustomSplash, setShowCustomSplash] = useState(true);

  useEffect(() => {
    async function prepare() {
      try {
        // üîÑ SIMULACI√ìN DE CARGA DE RECURSOS
        // En una app real, aqu√≠ cargar√≠as fuentes, im√°genes, o datos iniciales
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // ‚úÖ MARCAR APP COMO LISTA
        setIsAppReady(true);
        
        // üëã OCULTAR SPLASH SCREEN NATIVA
        await SplashScreen.hideAsync();
      } catch (e) {
        console.warn('Error durante la inicializaci√≥n:', e);
        setIsAppReady(true);
        await SplashScreen.hideAsync();
      }
    }

    prepare();
  }, []);

  // üé¨ FUNCI√ìN DE CALLBACK PARA TERMINAR SPLASH PERSONALIZADA
  const handleSplashComplete = () => {
    setShowCustomSplash(false);
  };

  // üñºÔ∏è MOSTRAR SPLASH PERSONALIZADA MIENTRAS LA APP NO EST√â LISTA
  if (!isAppReady || showCustomSplash) {
    return (
      <CustomSplashScreen 
        onAnimationComplete={handleSplashComplete}
      />
    );
  }

  // üèõÔ∏è ESTRUCTURA PRINCIPAL DE LA APLICACI√ìN
  // Esta es la arquitectura correcta para React Navigation:
  // NavigationContainer -> AuthProvider -> AppContent
  return (
    <NavigationContainer>
      {/* üîê PROVEEDOR DE CONTEXTO DE AUTENTICACI√ìN */}
      <AuthProvider>
        {/* üì± CONTENIDO PRINCIPAL DE LA APP */}
        <AppContent />
        {/* ‚ö° BARRA DE ESTADO */}
        <StatusBar style="auto" />
      </AuthProvider>
    </NavigationContainer>
  );
}